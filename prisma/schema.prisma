generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "debian-openssl-3.0.x"]
    // output = ""
}

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
    
}

enum Role {
    ADMIN
    EMPLOYEE
}

model User {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    firstName   String
    lastName    String
    email       String @unique
    password    String 
    phoneNumber String
    imageUrl    String
    role        Role   @default(EMPLOYEE)
    createdAt   DateTime? @default(now())
    updatedAt   DateTime? @updatedAt

    products Product[] @relation("USER")
    store    Store[] @relation("USERTOSTORE")

}

model Product {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String
    price       Float
    image       String?
    Restocked   DateTime?
    // salePrice   Float @default(0)
    stock       Int @default(0)
    totalSale   Int @default(0)
    isArchived  Boolean @default(false)
    categoryId  String @db.ObjectId
    category Category @relation("CATEGORY", fields: [categoryId], references: [id])
    ownerId     String @db.ObjectId
    owner User @relation( "USER",  fields: [ownerId], references: [id])
    createdAt   DateTime? @default(now())
    sales       Sale[]   @relation("PRODUCT")
    updatedAt   DateTime? @updatedAt
    storeId     String @db.ObjectId
    store       Store @relation("STORETOPRODUCT", fields: [storeId], references: [id])
    purchases   Purchase[] @relation("PRODUCTTOPURCHASE")



    @@index([storeId])
    @@index([ownerId])
    @@index([categoryId])
}

model Sale {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    userId      String @db.ObjectId
    productId   String @db.ObjectId
    product     Product @relation("PRODUCT", fields: [productId], references: [id])
    createdAt   DateTime @default(now())
    quantity    Int
    amount      Float
    storeId     String @db.ObjectId
    store       Store @relation("SALETOSTORE", fields: [storeId], references: [id])

    updatedAt   DateTime @updatedAt

    @@index([storeId])
    @@index([productId])
}

model Purchase {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    userId      String @db.ObjectId
    productId   String @db.ObjectId
    product     Product @relation("PRODUCTTOPURCHASE", fields: [productId], references: [id])
    createdAt   DateTime @default(now())
    quantity    Int
    amount      Float
    updatedAt   DateTime @updatedAt
    storeId     String @db.ObjectId
    store       Store @relation("PURCHASETOSTORE", fields: [storeId], references: [id])
    
    
    @@index([storeId])
    @@index([productId])

}



model Category {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String

    products Product[] @relation("CATEGORY")
    
}

model Store {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    location    String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    ownerId     String @db.ObjectId

    owner User @relation( "USERTOSTORE",  fields: [ownerId], references: [id])

    products Product[] @relation("STORETOPRODUCT")
    sales    Sale[] @relation("SALETOSTORE")
    purchase Purchase[] @relation("PURCHASETOSTORE")

    @@index([ownerId])

}